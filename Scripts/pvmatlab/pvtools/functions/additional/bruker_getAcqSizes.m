%% function acqSizes = bruker_getAcqSizes(Acqp, [Method])
%   Extract acquisition sizes from Acqp structure. For PV 360 job 
%   acquisition, these are derived from ACQ_jobs and the PVM_EncMatrix 
%   method parameter, else they are equal to ACQ_size.
%
% Input:
%   Acqp: An acqp struct as generated by the function
%         readBrukerParamFile('path/acqp')
%
% Optional Input (required for PV 360):
%   Method: A method struct as generated by the function
%           readBrukerParamFile('path/method')
%
% Output:
%   acqSizes: sizes of acquired raw data

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Copyright (c) 2019 - 2020
% Bruker BioSpin MRI GmbH
% D-76275 Ettlingen, Germany
%
% All Rights Reserved
%
% $Id$
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function acqSizes = bruker_getAcqSizes(Acqp, Method)

    % Determine raw data format
    if ~isfield(Acqp, 'ACQ_jobs')
        % no jobs
        if ~isfield(Acqp, 'ACQ_size')
            error('Either ACQ_size or ACQ_jobs required.');
        end
        acqSizes = Acqp.ACQ_size;
        return;
    end
    
    % job acquisition
    if iscell(Acqp.ACQ_jobs)
        % Starting from PV 360, the job description contains a string
        % for the job name, so ACQ_jobs is a cell array
        % derive scan size from job0
        scanSize = Acqp.ACQ_jobs{1, 1};
    else
        % Pre-PV 360 job description - return ACQ_size
        if ~isfield(Acqp, 'ACQ_size')
            error('ACQ_size is required.');
        end

        acqSizes = Acqp.ACQ_size;
        return;
    end

    % PV 360 jobs acquisition
    if ~bruker_requires({Acqp}, {'Acqp','ACQ_dim','ACQ_dim_desc'})
        error('Some parameters are missing.');
    end

    acqSizes = zeros([1 Acqp.ACQ_dim]);
    acqSizes(1) = scanSize;
   
    isSpatialDim = strcmpi(Acqp.ACQ_dim_desc, 'Spatial');
    spatialDims = sum(isSpatialDim);
    if 1 == isSpatialDim(1) 
        % first dimension is spatial
        if 0 == isSpatialDim(2) 
            % EPSI
            if ~exist('Method','var')
                error('Method parameters are required to read EPSI raw data.');
            end
            if ~bruker_requires({Method}, {'Method','SpecSize','PVM_EncMatrix'})
               error('SpecSize or PVM_EncMatrix parameter is missing.');
            end
            acqSizes(1) = 2 * Method.PVM_EncMatrix(1); % factor 2: complex
            acqSizes(2) = Method.SpecSize;
            switch spatialDims
                case 2
                    acqSizes(3) = Method.PVM_EncMatrix(2);
                case 3
                    acqSizes(3:4) = Method.PVM_EncMatrix(2:3);
                otherwise
                    error('Unsupported ACQ_dim');
            end
            return;
        elseif spatialDims ~= length(isSpatialDim)
            % only support all-spatial datasets
            error(['Unsupported dataset dimensions: ' Acqp.ACQ_dim_desc{:}]);
        end
        if 1 == spatialDims
            % nothing to do
            return;
        end
        if ~exist('Method','var')
            error('Method parameters are required to read PV 360 raw data.');
        end
        if ~bruker_requires({Method}, {'Method','PVM_EncMatrix'})
            error('PVM_EncMatrix parameter is missing.');
        end        
        switch spatialDims
            case 2
                acqSizes(2) = Method.PVM_EncMatrix(2);
            case 3
                acqSizes(2:3) = Method.PVM_EncMatrix(2:3);
            otherwise
                error('Unsupported ACQ_dim');
        end
    else
        % first dimension is non-spatial, e.g., spectroscopic
        if spatialDims ~= length(isSpatialDim) - 1
            % only support spectral + n-spatial datasets
            error(['Unsupported dataset dimensions: ' Acqp.ACQ_dim_desc{:}]);
        end
        if 0 == spatialDims
            % nothing to do
            return;
        end
        if ~exist('Method','var')
            error('Method parameters are required to read PV 360 raw data.');
        end
        if ~bruker_requires({Method}, {'Method','PVM_EncMatrix'})
            error('Some parameters are missing.');
        end
        switch spatialDims
            case 1
                acqSizes(2) = Method.PVM_EncMatrix(1);
            case 2
                acqSizes(2:3) = Method.PVM_EncMatrix(1:2);
            case 3
                acqSizes(2:4) = Method.PVM_EncMatrix(1:3);
            otherwise
                error('Unsupported ACQ_dim');
        end
    end
end
