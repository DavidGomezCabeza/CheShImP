function [ data] = convertRawToFrame( data, Acqp, varargin)
% function frame = convertRawToFrame(data, Acqp, [Method], ['specified_NRs', NRarray])
% 
% Input:
%   data: the raw data (fid/rawdata.job*), as read by ReadBrukerRaw 
%
%   Acqp: An acqp struct as generated by the function readBrukerParamFile('path/acqp')
% 
% Optional Input:
%   Method: A method parameter struct as generated by the function 
%           readBrukerParamFile('path/method'). Method parameters are
%           needed to convert raw data acquired with job-acqusition to
%           frame data.
%
%   'specified_NRs', NRarray: A list of NRs to be read, NR starting with 1 
%                             'specified_NRs',[2 5 7] -> only NR 2, 5 and 7 are converted
%
% Output:
%   frame: sorted 5D-Matrix with dimensions 
%          (Scansize, ScansPerFrame, NumberOfReceiveChannels, NumberOfObjects, NumberOfRepetitions)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Copyright (c) 2013-2021
% Bruker BioSpin MRI GmbH
% D-76275 Ettlingen, Germany
%
% All Rights Reserved
%
% $Id$
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    %% Define default-value if necesseary:

    % Check arguments
    [varargin,specified_NRs]=bruker_addParamValue(varargin, 'specified_NRs','@(x) isnumeric(x)',[]);

    % Read method parameter argument, if present.
    if length(varargin) == 1
        Method=varargin{1};
    elseif isempty(varargin) 
        Method=struct();
    else
        warning('MATLAB:bruker_warning', 'Check your input arguments to function convertRawToFrame')
    end    
    
    % Check data input
    if iscell(data)
        % use job0
        data = data{1};
    end

    % Check for missing variables in structs:
    cellstruct{1}=Acqp;
    all_here = bruker_requires(cellstruct, {'Acqp','NI','NR','ACQ_phase_factor','ACQ_obj_order', 'ACQ_dim'});
    clear cellstruct;
    if ~all_here
        error('Some parameters are missing');
    end

    %Init:
    complexfid=~isreal(data);
    NI=Acqp.NI;
    ACQ_size=bruker_getAcqSizes(Acqp,Method);
    ACQ_phase_factor=bruker_getPhaseFactor(Acqp,Method);
    ACQ_obj_order=Acqp.ACQ_obj_order;
    ACQ_dim=Acqp.ACQ_dim;
    if ~isempty(specified_NRs)
        NR=length(specified_NRs);
    else
        NR=Acqp.NR; 
    end
    
    % read precision:
    temp=whos('data');
    precision=temp.class;
    clear temp;
    % Convert precision-string to boolean-variable:
    if(strcmpi(precision, 'single'))
        memsave=true;
    else
        memsave=false;
    end
    clear precision;   

%-----------------------------------------------
    %% Calculate additional Parameters
    
    % calculate numSelectedReceivers
    numSelectedReceivers=size(data,1);
    
    % Calculating number of elements in higher dimensions
      

    % Convert if complex: to blockSize of a complex Matrix and change
    % ACQ_size(1)

    if ~isempty(strfind(Acqp.ACQ_method,'EPSI'))
        if complexfid
            ACQ_size = [ACQ_size(2)*2, ACQ_size(1)/2, ACQ_size(3)];
        else
            ACQ_size = [ACQ_size(2), ACQ_size(1), ACQ_size(3)];
        end
    end

    numDataHighDim=prod(ACQ_size(2:end));  

    if complexfid
        scanSize(1)=ACQ_size(1)/2;
    else
        scanSize(1)=ACQ_size(1);
    end  

    %% Start resort:
    
    % Added by David to handle EPI images
    if strcmp(varargin{1}.Method, 'Bruker:EPI')
        scanSize = varargin{1}.PVM_EpiMatrix(1); % Maybe it is 2?
    end
       


    % 


    if ACQ_dim>1

        % Permuting receiver and read direction
        % data entering: (numSelectedReceivers, scanSize, numDataHighDim*NI*NR)
        
        data=reshape(data, numSelectedReceivers, scanSize, ACQ_phase_factor, NI, numDataHighDim/ACQ_phase_factor,NR);
        data=permute(data, [2 3 5 1 4 6]); % => scansize, ACQ_phase_factor, numDataHighDim/ACQ_phase_factor, numSelectedReceivers, NI, NR
        data=reshape(data, scanSize, numDataHighDim, numSelectedReceivers, NI, NR);

        if NI ~= length(ACQ_obj_order)
            error('Size of ACQ_obj_order is not equal to NI: Data from unsupported method?');
        end
        
        data(:,:,:,ACQ_obj_order+1,:)=data;
    else
        % dim=1:
        data=reshape(data,numSelectedReceivers, scanSize,1,NI,NR);
        data=permute(data, [2 3 1 4 5]);
    end
end
